/* 파이어스토어에 데이터 추가 테스트 코드 */
val db = Firebase.firestore
        val user = hashMapOf(
            "name" to "khy",
            "age" to 22,
            "born" to 2002
        )

        db.collection("inmun").document("user")
            .set(user)
            .addOnSuccessListener { documentReference ->
                Log.d(TAG, "Success")
            }
            .addOnFailureListener { e ->
                Log.w(TAG, "Error adding document", e)
            }


 /* 매개 변수 -> 함수 내용(람다 표현식) */
        documentRef.get().addOnSuccessListener { documentSnapshot ->
            if (documentSnapshot.exists()) {
                // documentSnapshot을 데이터 모델 클래스에 담는다.
                val dataModel = documentSnapshot.toObject(Notice_list::class.java)
                // 데이터 모델 클래스의 객체를 리스트에 추가한다.
                val dataList = arrayListOf<Notice_list>(dataModel!!)
                // 어댑터 클래스를 만들어 리스트의 데이터를 리사이클러뷰에 바인딩한다.
                val adapter = NoticeAdapter(dataList)
                binding.rvNoticeList.adapter = adapter
            }
        }


<파이어스토어 데이터 리사이클러뷰에 넣기>
         #1 파이어스토어에서 데이터 가져오기
        val db = Firebase.firestore
        val collectionRef = db.collection("inmun")
        val documentRef = collectionRef.document("korea").collection("외국인 유학생 안내")

        // 올바른 데이터 가져왔는지 출력해서 확인
        documentRef.get()
            .addOnSuccessListener { documents ->
                val docList = mutableListOf<Int>() // 변경가능한 배열
                for (document in documents) {
                    val docNum = document.data
                    docNum?.let { docList.addAll(docNum.values) } // it->documents(파라미터)
                }
                for (element in docList) {
                    println(element)
                }
            }
            .addOnFailureListener { exception ->
                Log.w(TAG, "Error getting documents: ", exception)
            }


         /* 문서안의 모든 필드 가져오기 */
         val db = Firebase.firestore
                 val docRef = db.collection("inmun").document("korea")
                     .collection("외국인 유학생 안내").document("14")
                 docRef.get()
                     .addOnSuccessListener { documentSnapshot ->
                         if (documentSnapshot != null && documentSnapshot.exists()) {
                             val data = documentSnapshot.data
                             Log.d(TAG, "All fields: $data")
                         } else {
                             Log.d(TAG, "No such document")
                         }
                     }
                     .addOnFailureListener { exception ->
                         Log.d(TAG, "get failed with ", exception)
                     }

        /* 문서 안 필드 한줄에 하나씩 가져오기 */
        val db = Firebase.firestore
                val docRef = db.collection("inmun").document("korea")
                    .collection("외국인 유학생 안내").document("14")
                docRef.get()
                    .addOnSuccessListener { documentSnapshot ->
                        val title = documentSnapshot.getString("title")
                        val baseUrl = documentSnapshot.getString("baseUrl")
                        val createdAt = documentSnapshot.getTimestamp("createdAt")

                        Log.d(TAG, "Title: $title")
                        Log.d(TAG, "baseUrl: $baseUrl")
                        Log.d(TAG, "createdAt: $createdAt")

                        val summaryArray = documentSnapshot.get("summary") as? ArrayList<String>
                        summaryArray?.forEach { summary ->
                            Log.d(TAG, "summary: $summary")
                        }

                        val fileUrlsMap = documentSnapshot.get("fileUrls") as? HashMap<String, String>
                        fileUrlsMap?.forEach { (key, value) ->
                            Log.d(TAG, "title: $key, url: $value")
                        }
                    }
                    .addOnFailureListener { exception ->
                        Log.d(TAG, "Error getting document: ", exception)
                    }

        /* 컬렉션 안에 있는 모든 문서들 데이터 가져오기 */
        val db = Firebase.firestore
                val docRef = db.collection("inmun").document("korea")
                    .collection("외국인 유학생 안내")

                docRef.get().addOnSuccessListener { documents ->
                    for(document in documents) {

                        Log.d(TAG, "${document.id} => ${document.data}")
                    }
                }
                    .addOnFailureListener{ exception ->
                        Log.d(TAG, "Error:", exception)
                    }


        // 파이어베이스 functions을 이용한 학과 카테고리 배열로 들고오기
                val functions = FirebaseFunctions.getInstance()

                val data = hashMapOf(
                    "college" to "inmun",
                    "department" to "dokmun"
                )
                functions.getHttpsCallable("listSubcollections")
                    .call(data)
                    .addOnSuccessListener { task ->
                        val result = task.data as Map<String, Any>
                        val collections = result["collections"] as List<String>
                        Log.d("FirebaseFunctions", "Successfully read collections: $collections")
                        // 읽어온 컬렉션 데이터 처리
                    }
                    .addOnFailureListener { exception ->
                        Log.w("FirebaseFunctions", "Error reading collections: ", exception)
                        // 읽어오기 실패 처리
                    }

/*
val inmunDocuments = listOf("dokmun", "korea", "china", "english", "france", "hanmun", "his", "korea", "minsok", "russia", "sophia")
val inmunCollections = listOf("공지사항", "기타", "장학", "수업", "졸업", "학사", "행사")

val cnsDocuments = listOf("biomat", "chem", "cloth", "cs", "cse", "foodnutri", "geology", "ls", "math", "pharmgine", "psysics", "stat")
val cnsCollections = listOf("공지사항", "기타", "장학", "수업", "졸업", "학사", "행사")

val firestore = FirebaseFirestore.getInstance()

val allDocuments = inmunDocuments + cnsDocuments
val allCollections = inmunCollections + cnsCollections
var counter = 0 // 쿼리 완료 수
val totalQueries = allDocuments.size * allCollections.size // 총 쿼리 수

for (document in allDocuments) {
for (collection in allCollections) {
    firestore.collection(if (document in inmunDocuments) "inmun" else "cns")
        .document(document).collection(collection)
        .get()
        .addOnSuccessListener { querySnapshot ->
            for (snapshot in querySnapshot.documents) {
                val item = snapshot.toObject(Notice_list::class.java)
                item?.let { noticeList.add(it) }
            }
        }
        .addOnFailureListener { e ->
            Log.w("TAG", "Error getting documents.", e)
        }
        .addOnCompleteListener {
            counter++
            if (counter == totalQueries) {
                // 모든 쿼리 완료 후 날짜순으로 정렬
                noticeList.sortByDescending { it.createdAt?.toDate() }
                notifyDataSetChanged()
            }
        }
}
}

// inmun 컬렉션의 문서 데이터 가져오기
for (document in inmunDocuments) {
for (collection in inmunCollections) {
    firestore.collection("inmun").document(document).collection(collection)
        .addSnapshotListener { querySnapshot, firebaseFirestoreException ->

            for (snapshot in querySnapshot!!.documents) {
                var item = snapshot.toObject(Notice_list::class.java)
                noticeList.add(item!!)
            }
            notifyDataSetChanged()
        }
}
}

// cns 컬렉션의 문서 데이터 가져오기
for (document in cnsDocuments) {
for (collection in cnsCollections) {
    firestore.collection("cns").document(document).collection(collection)
        .addSnapshotListener { querySnapshot, firebaseFirestoreException ->

            for (snapshot in querySnapshot!!.documents) {
                var item = snapshot.toObject(Notice_list::class.java)
                noticeList.add(item!!)
            }
            notifyDataSetChanged()
        }
}
}
*/

//단과대학도 리스트로 묶어서 삼중 중첩 반복문 도는 코드 수정 중
init {
        val firestore = FirebaseFirestore.getInstance()
        //val allColCollection = listOf("inmun", "cns", "css", "biz")
        val allDocuments = listOf(
            "dokmun", "korea", "china", "english", "france", "hanmun", "his", "korea",
            "minsok", "russia", "sophia", "biomat", "chem", "cloth", "cs", "cse",
            "foodnutri", "geology", "ls", "math", "pharmgine", "psysics", "stat"
        )

        val allCollections = listOf("공지사항", "전체공지", "학과공지", "공지(2022학번 이후)", "공지(~2021학번까지)", "취업정보", "채용공고", "진로-취업", "기타", "장학", "장학-등록", "장학정보", "장학관련", "수업", "졸업", "학사","학사공지", "행사", "행사-기타", "공모전 및 대회", "대외활동 공고", "비교과프로그램", "외국인 유학생 안내")

        for (document in allDocuments) {
            for (collection in allCollections) {
                val inmunRef = firestore.collection("inmun").document(document).collection(collection)
                val cnsRef = firestore.collection("cns").document(document).collection(collection)

                // Add a snapshot listener for each collection
                inmunRef.addSnapshotListener { querySnapshot, firebaseFirestoreException ->
                    for (snapshot in querySnapshot!!.documents) {
                        val item = snapshot.toObject(Notice_list::class.java)
                        noticeList.add(item!!)
                    }
                    notifyDataSetChanged()
                }

                cnsRef.addSnapshotListener { querySnapshot, firebaseFirestoreException ->
                    for (snapshot in querySnapshot!!.documents) {
                        val item = snapshot.toObject(Notice_list::class.java)
                        noticeList.add(item!!)
                    }
                    notifyDataSetChanged()
                }
            }
        }
    }